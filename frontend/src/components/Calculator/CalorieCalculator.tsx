import React, { useState } from "react";
import {
  Box,
  Card,
  CardContent,
  Typography,
  TextField,
  Button,
  Grid,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Alert,
  Divider,
  Chip,
  CircularProgress,
  Paper,
  Slider,
  Stack,
  Avatar,
  LinearProgress,
  Tooltip,
  IconButton,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Switch,
  FormControlLabel,
} from "@mui/material";
import {
  Calculate as CalculateIcon,
  LocalFireDepartment as CaloriesIcon,
  FitnessCenter as ProteinIcon,
  Opacity as FatsIcon,
  Grain as CarbsIcon,
  TrendingUp as TrendingUpIcon,
  TrendingDown as TrendingDownIcon,
  TrendingFlat as TrendingFlatIcon,
  Info as InfoIcon,
  Refresh as RefreshIcon,
  Save as SaveIcon,
  Person as PersonIcon,
  Height as HeightIcon,
  Cake as CakeIcon,
  Wc as GenderIcon,
  DirectionsRun as ActivityIcon,
  Flag as GoalIcon,
  Settings as ConfigIcon,
} from "@mui/icons-material";
import {
  GoalType,
  Gender,
  ActivityLevel,
  CalorieCalculatorRequestDTO,
  CalorieCalculatorResponseDTO,
} from "../../types/personal-settings.types";
import { MealPlanGenerationConfigDTO } from "../../types/program.types";
import { useCalorieCalculator } from "../../hooks/useCalorieCalculator";

// Configuration objects - can be moved to a separate config file
const ACTIVITY_LEVELS = {
  SEDENTARY: {
    label: "–°–µ–¥—è—â –Ω–∞—á–∏–Ω –Ω–∞ –∂–∏–≤–æ—Ç",
    description: "–ú–∞–ª–∫–æ –∏–ª–∏ –Ω–∏–∫–∞–∫–≤–æ –¥–≤–∏–∂–µ–Ω–∏–µ, —Å–µ–¥—è—â–∞ —Ä–∞–±–æ—Ç–∞",
    multiplier: 1.2,
    icon: "üõãÔ∏è",
  },
  LIGHTLY_ACTIVE: {
    label: "–õ–µ–∫–æ –∞–∫—Ç–∏–≤–µ–Ω",
    description: "1-3 –¥–Ω–∏ –ª–µ–∫–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ —Å–µ–¥–º–∏—Ü–∞",
    multiplier: 1.375,
    icon: "üö∂",
  },
  MODERATELY_ACTIVE: {
    label: "–£–º–µ—Ä–µ–Ω–æ –∞–∫—Ç–∏–≤–µ–Ω",
    description: "3-5 –¥–Ω–∏ —É–º–µ—Ä–µ–Ω–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ —Å–µ–¥–º–∏—Ü–∞",
    multiplier: 1.55,
    icon: "üèÉ",
  },
  VERY_ACTIVE: {
    label: "–ú–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–µ–Ω",
    description: "6-7 –¥–Ω–∏ —Ç–µ–∂–∫–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ —Å–µ–¥–º–∏—Ü–∞",
    multiplier: 1.725,
    icon: "üí™",
  },
  EXTRA_ACTIVE: {
    label: "–ï–∫—Å—Ç—Ä–∞ –∞–∫—Ç–∏–≤–µ–Ω",
    description: "–¢–µ–∂–∫–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è + —Ñ–∏–∑–∏—á–µ—Å–∫–∞ —Ä–∞–±–æ—Ç–∞",
    multiplier: 1.9,
    icon: "üî•",
  },
};

const GOALS = {
  LOSE_WEIGHT: {
    label: "–ó–∞–≥—É–±–∞ –Ω–∞ —Ç–µ–≥–ª–æ",
    description: "–î–µ—Ñ–∏—Ü–∏—Ç –æ—Ç 500 –∫–∫–∞–ª/–¥–µ–Ω",
    adjustment: -500,
    proteinMultiplier: 2.2,
    icon: <TrendingDownIcon color="error" />,
    color: "error",
  },
  MAINTAIN_WEIGHT: {
    label: "–ü–æ–¥–¥—ä—Ä–∂–∞–Ω–µ –Ω–∞ —Ç–µ–≥–ª–æ",
    description: "–ü–æ–¥–¥—ä—Ä–∂–∞–Ω–µ –Ω–∞ —Ç–µ–∫—É—â–æ—Ç–æ —Ç–µ–≥–ª–æ",
    adjustment: 0,
    proteinMultiplier: 2.0,
    icon: <TrendingFlatIcon color="info" />,
    color: "info",
  },
  GAIN_WEIGHT: {
    label: "–ö–∞—á–≤–∞–Ω–µ –Ω–∞ –º—É—Å–∫—É–ª–Ω–∞ –º–∞—Å–∞",
    description: "–ò–∑–ª–∏—à—ä–∫ –æ—Ç 300 –∫–∫–∞–ª/–¥–µ–Ω",
    adjustment: 300,
    proteinMultiplier: 2.4,
    icon: <TrendingUpIcon color="success" />,
    color: "success",
  },
};

const GENDERS = {
  MALE: { label: "–ú—ä–∂", icon: "üë®" },
  FEMALE: { label: "–ñ–µ–Ω–∞", icon: "üë©" },
};

const CalorieCalculator: React.FC = () => {
  const [formData, setFormData] = useState<CalorieCalculatorRequestDTO>({
    weight: 70,
    height: 170,
    age: 25,
    gender: "MALE",
    activityLevel: "MODERATELY_ACTIVE",
    goal: "MAINTAIN_WEIGHT",
  });

  const [result, setResult] = useState<CalorieCalculatorResponseDTO | null>(
    null
  );
  const [showDetails, setShowDetails] = useState(false);
  const [openConfigDialog, setOpenConfigDialog] = useState(false);
  const [configData, setConfigData] = useState<MealPlanGenerationConfigDTO>({
    planName: "–•—Ä–∞–Ω–∏—Ç–µ–ª–µ–Ω –ø–ª–∞–Ω",
    planDescription: "–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω —Ö—Ä–∞–Ω–∏—Ç–µ–ª–µ–Ω –ø–ª–∞–Ω",
    startDate: new Date().toISOString().split("T")[0],
    endDate: new Date(Date.now() + 28 * 24 * 60 * 60 * 1000)
      .toISOString()
      .split("T")[0],
    goal: "MAINTAIN_WEIGHT",
    durationWeeks: 4,
    includeWorkoutDays: true,
    workoutDayCalorieMultiplier: 1.1,
    mealDistribution: {
      BREAKFAST: 0.25,
      LUNCH: 0.35,
      DINNER: 0.3,
      SNACKS: 0.1,
    },
    workoutDayMealDistribution: {
      BREAKFAST: 0.25,
      LUNCH: 0.3,
      DINNER: 0.25,
      SNACKS: 0.2,
    },
    useSmartGeneration: true,
    includeSnacks: true,
    mealsPerDay: 4,
    proteinPercentage: 30,
    carbsPercentage: 40,
    fatsPercentage: 30,
    usePersonalSettingsForMacros: true,
  });

  const {
    calculateNutrition,
    calculateAndSaveToPersonalSettings,
    generateTrainingProgram,
    generateMealPlan,
    generateSmartMealPlan,
    generateSmartMealPlanWithConfig,
    generateMealPlanWithConfig,
    generateDailyPlan,
    loading,
    error,
    clearError,
  } = useCalorieCalculator();

  const handleCalculate = async () => {
    const response = await calculateNutrition(formData);
    if (response) {
      setResult(response);
      setShowDetails(true);
    }
  };

  const handleSaveToProfile = async () => {
    if (result) {
      const response = await calculateAndSaveToPersonalSettings(formData);
      if (response) {
        // Show success message
        console.log("–ù–∞—Å—Ç—Ä–æ–π–∫–∏—Ç–µ —Å–∞ –∑–∞–ø–∞–∑–µ–Ω–∏ —É—Å–ø–µ—à–Ω–æ!");
      }
    }
  };

  const handleGenerateTrainingProgram = async () => {
    const response = await generateTrainingProgram(formData);
    if (response) {
      console.log("–¢—Ä–µ–Ω–∏—Ä–æ–≤—ä—á–Ω–∞—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–∞ –µ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!");
    }
  };

  const handleGenerateMealPlan = async () => {
    const response = await generateMealPlan(formData);
    if (response) {
      console.log("–•—Ä–∞–Ω–∏—Ç–µ–ª–Ω–∏—è—Ç –ø–ª–∞–Ω –µ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ!");
    }
  };

  const handleGenerateSmartMealPlan = async () => {
    const response = await generateSmartMealPlan(formData, true);
    if (response) {
      console.log("–£–º–Ω–∏—è—Ç —Ö—Ä–∞–Ω–∏—Ç–µ–ª–µ–Ω –ø–ª–∞–Ω –µ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ!");
    }
  };

  const handleGenerateMealPlanWithConfig = async () => {
    const response = await generateMealPlanWithConfig(formData, configData);
    if (response) {
      console.log("–•—Ä–∞–Ω–∏—Ç–µ–ª–Ω–∏—è—Ç –ø–ª–∞–Ω —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –µ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ!");
    }
    setOpenConfigDialog(false);
  };

  const handleGenerateSmartMealPlanWithConfig = async () => {
    const response = await generateSmartMealPlanWithConfig(
      formData,
      configData
    );
    if (response) {
      console.log("–£–º–Ω–∏—è—Ç —Ö—Ä–∞–Ω–∏—Ç–µ–ª–µ–Ω –ø–ª–∞–Ω —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –µ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ!");
    }
    setOpenConfigDialog(false);
  };

  const handleGenerateDailyPlan = async () => {
    const response = await generateDailyPlan(formData);
    if (response) {
      console.log("–î–Ω–µ–≤–Ω–∏—è—Ç –ø–ª–∞–Ω –µ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ!");
    }
  };

  const handleOpenConfigDialog = () => {
    setOpenConfigDialog(true);
  };

  const handleCloseConfigDialog = () => {
    setOpenConfigDialog(false);
  };

  const handleInputChange = (
    field: keyof CalorieCalculatorRequestDTO,
    value: any
  ) => {
    setFormData((prev) => ({
      ...prev,
      [field]: value,
    }));
  };

  const resetForm = () => {
    setFormData({
      weight: 70,
      height: 170,
      age: 25,
      gender: "MALE",
      activityLevel: "MODERATELY_ACTIVE",
      goal: "MAINTAIN_WEIGHT",
    });
    setResult(null);
    setShowDetails(false);
    clearError();
  };

  return (
    <Box>
      <Typography variant="h4" gutterBottom align="center" sx={{ mb: 4 }}>
        <CalculateIcon sx={{ mr: 1, verticalAlign: "middle" }} />
        –ö–∞–ª–∫—É–ª–∞—Ç–æ—Ä –∑–∞ –∫–∞–ª–æ—Ä–∏–∏
      </Typography>

      {error && (
        <Alert severity="error" sx={{ mb: 2 }} onClose={clearError}>
          {error}
        </Alert>
      )}

      <Grid container spacing={3}>
        {/* Input Form */}
        <Grid size={{ xs: 12, md: 6 }}>
          <Card>
            <CardContent>
              <Typography variant="h6" gutterBottom>
                –í—ä–≤–µ–¥–µ—Ç–µ –≤–∞—à–∏—Ç–µ –¥–∞–Ω–Ω–∏
              </Typography>

              <Grid container spacing={2}>
                {/* Weight */}
                <Grid size={{ xs: 6 }}>
                  <TextField
                    fullWidth
                    label="–¢–µ–≥–ª–æ (–∫–≥)"
                    type="number"
                    value={formData.weight}
                    onChange={(e) =>
                      handleInputChange("weight", Number(e.target.value))
                    }
                    InputProps={{
                      startAdornment: (
                        <PersonIcon sx={{ mr: 1, color: "gray" }} />
                      ),
                    }}
                  />
                </Grid>

                {/* Height */}
                <Grid size={{ xs: 6 }}>
                  <TextField
                    fullWidth
                    label="–í–∏—Å–æ—á–∏–Ω–∞ (—Å–º)"
                    type="number"
                    value={formData.height}
                    onChange={(e) =>
                      handleInputChange("height", Number(e.target.value))
                    }
                    InputProps={{
                      startAdornment: (
                        <HeightIcon sx={{ mr: 1, color: "gray" }} />
                      ),
                    }}
                  />
                </Grid>

                {/* Age */}
                <Grid size={{ xs: 6 }}>
                  <TextField
                    fullWidth
                    label="–í—ä–∑—Ä–∞—Å—Ç"
                    type="number"
                    value={formData.age}
                    onChange={(e) =>
                      handleInputChange("age", Number(e.target.value))
                    }
                    InputProps={{
                      startAdornment: (
                        <CakeIcon sx={{ mr: 1, color: "gray" }} />
                      ),
                    }}
                  />
                </Grid>

                {/* Gender */}
                <Grid size={{ xs: 6 }}>
                  <FormControl fullWidth>
                    <InputLabel>–ü–æ–ª</InputLabel>
                    <Select
                      value={formData.gender}
                      label="–ü–æ–ª"
                      onChange={(e) =>
                        handleInputChange("gender", e.target.value)
                      }
                    >
                      {Object.entries(GENDERS).map(([key, value]) => (
                        <MenuItem key={key} value={key}>
                          <Box sx={{ display: "flex", alignItems: "center" }}>
                            <span style={{ marginRight: 8 }}>{value.icon}</span>
                            {value.label}
                          </Box>
                        </MenuItem>
                      ))}
                    </Select>
                  </FormControl>
                </Grid>

                {/* Activity Level */}
                <Grid size={{ xs: 12 }}>
                  <FormControl fullWidth>
                    <InputLabel>–ù–∏–≤–æ –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç</InputLabel>
                    <Select
                      value={formData.activityLevel}
                      label="–ù–∏–≤–æ –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç"
                      onChange={(e) =>
                        handleInputChange("activityLevel", e.target.value)
                      }
                    >
                      {Object.entries(ACTIVITY_LEVELS).map(([key, value]) => (
                        <MenuItem key={key} value={key}>
                          <Box sx={{ display: "flex", alignItems: "center" }}>
                            <span style={{ marginRight: 8 }}>{value.icon}</span>
                            <Box>
                              <Typography variant="body2">
                                {value.label}
                              </Typography>
                              <Typography
                                variant="caption"
                                color="text.secondary"
                              >
                                {value.description}
                              </Typography>
                            </Box>
                          </Box>
                        </MenuItem>
                      ))}
                    </Select>
                  </FormControl>
                </Grid>

                {/* Goal */}
                <Grid size={{ xs: 12 }}>
                  <FormControl fullWidth>
                    <InputLabel>–¶–µ–ª</InputLabel>
                    <Select
                      value={formData.goal}
                      label="–¶–µ–ª"
                      onChange={(e) =>
                        handleInputChange("goal", e.target.value)
                      }
                    >
                      {Object.entries(GOALS).map(([key, value]) => (
                        <MenuItem key={key} value={key}>
                          <Box sx={{ display: "flex", alignItems: "center" }}>
                            {value.icon}
                            <Box sx={{ ml: 1 }}>
                              <Typography variant="body2">
                                {value.label}
                              </Typography>
                              <Typography
                                variant="caption"
                                color="text.secondary"
                              >
                                {value.description}
                              </Typography>
                            </Box>
                          </Box>
                        </MenuItem>
                      ))}
                    </Select>
                  </FormControl>
                </Grid>
              </Grid>

              <Box sx={{ mt: 3, display: "flex", gap: 2 }}>
                <Button
                  variant="contained"
                  onClick={handleCalculate}
                  disabled={loading}
                  startIcon={
                    loading ? <CircularProgress size={20} /> : <CalculateIcon />
                  }
                  fullWidth
                >
                  {loading ? "–ò–∑—á–∏—Å–ª—è–≤–∞–Ω–µ..." : "–ò–∑—á–∏—Å–ª–∏"}
                </Button>
                <Button
                  variant="outlined"
                  onClick={resetForm}
                  startIcon={<RefreshIcon />}
                >
                  –ù—É–ª–∏—Ä–∞–π
                </Button>
              </Box>
            </CardContent>
          </Card>
        </Grid>

        {/* Results */}
        <Grid size={{ xs: 12, md: 6 }}>
          {result ? (
            <Card>
              <CardContent>
                <Typography variant="h6" gutterBottom>
                  –†–µ–∑—É–ª—Ç–∞—Ç–∏
                </Typography>

                {/* Daily Calories */}
                <Box sx={{ mb: 3 }}>
                  <Typography variant="h4" color="primary" gutterBottom>
                    {Math.round(result.dailyCalories)} –∫–∫–∞–ª/–¥–µ–Ω
                  </Typography>
                  <Typography variant="body2" color="text.secondary">
                    –ü—Ä–µ–ø–æ—Ä—ä—á–∏—Ç–µ–ª–Ω–∏ –¥–Ω–µ–≤–Ω–∏ –∫–∞–ª–æ—Ä–∏–∏
                  </Typography>
                </Box>

                {/* Macronutrients */}
                <Grid container spacing={2} sx={{ mb: 3 }}>
                  <Grid size={{ xs: 4 }}>
                    <Box textAlign="center">
                      <ProteinIcon color="primary" sx={{ fontSize: 40 }} />
                      <Typography variant="h6">
                        {Math.round(result.macroDistribution.proteinGrams)}g
                      </Typography>
                      <Typography variant="caption">–ü—Ä–æ—Ç–µ–∏–Ω–∏</Typography>
                    </Box>
                  </Grid>
                  <Grid size={{ xs: 4 }}>
                    <Box textAlign="center">
                      <FatsIcon color="primary" sx={{ fontSize: 40 }} />
                      <Typography variant="h6">
                        {Math.round(result.macroDistribution.fatsGrams)}g
                      </Typography>
                      <Typography variant="caption">–ú–∞–∑–Ω–∏–Ω–∏</Typography>
                    </Box>
                  </Grid>
                  <Grid size={{ xs: 4 }}>
                    <Box textAlign="center">
                      <CarbsIcon color="primary" sx={{ fontSize: 40 }} />
                      <Typography variant="h6">
                        {Math.round(result.macroDistribution.carbsGrams)}g
                      </Typography>
                      <Typography variant="caption">–í—ä–≥–ª–µ—Ö–∏–¥—Ä–∞—Ç–∏</Typography>
                    </Box>
                  </Grid>
                </Grid>

                {/* Action Buttons */}
                <Stack spacing={2}>
                  <Button
                    variant="contained"
                    color="success"
                    onClick={handleSaveToProfile}
                    startIcon={<SaveIcon />}
                    fullWidth
                  >
                    –ó–∞–ø–∞–∑–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–∞
                  </Button>

                  <Button
                    variant="outlined"
                    onClick={handleGenerateTrainingProgram}
                    fullWidth
                  >
                    –ì–µ–Ω–µ—Ä–∏—Ä–∞–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤—ä—á–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–∞
                  </Button>

                  <Button
                    variant="outlined"
                    onClick={handleGenerateMealPlan}
                    fullWidth
                  >
                    –ì–µ–Ω–µ—Ä–∏—Ä–∞–π —Ö—Ä–∞–Ω–∏—Ç–µ–ª–µ–Ω –ø–ª–∞–Ω
                  </Button>

                  <Button
                    variant="outlined"
                    onClick={handleGenerateSmartMealPlan}
                    fullWidth
                  >
                    –ì–µ–Ω–µ—Ä–∏—Ä–∞–π —É–º–µ–Ω —Ö—Ä–∞–Ω–∏—Ç–µ–ª–µ–Ω –ø–ª–∞–Ω
                  </Button>

                  <Button
                    variant="outlined"
                    startIcon={<ConfigIcon />}
                    onClick={handleOpenConfigDialog}
                    fullWidth
                  >
                    –ì–µ–Ω–µ—Ä–∏—Ä–∞–π —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                  </Button>

                  <Button
                    variant="outlined"
                    onClick={handleGenerateDailyPlan}
                    fullWidth
                  >
                    –ì–µ–Ω–µ—Ä–∏—Ä–∞–π –¥–Ω–µ–≤–µ–Ω –ø–ª–∞–Ω
                  </Button>
                </Stack>
              </CardContent>
            </Card>
          ) : (
            <Card>
              <CardContent>
                <Box
                  sx={{
                    display: "flex",
                    flexDirection: "column",
                    alignItems: "center",
                    py: 4,
                  }}
                >
                  <CalculateIcon sx={{ fontSize: 60, color: "gray", mb: 2 }} />
                  <Typography variant="h6" color="text.secondary" gutterBottom>
                    –í—ä–≤–µ–¥–µ—Ç–µ –¥–∞–Ω–Ω–∏—Ç–µ
                  </Typography>
                  <Typography
                    variant="body2"
                    color="text.secondary"
                    textAlign="center"
                  >
                    –ü–æ–ø—ä–ª–Ω–µ—Ç–µ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–ª—è–≤–æ –∏ –Ω–∞—Ç–∏—Å–Ω–µ—Ç–µ "–ò–∑—á–∏—Å–ª–∏" –∑–∞ –¥–∞
                    –ø–æ–ª—É—á–∏—Ç–µ –≤–∞—à–∏—Ç–µ –ø—Ä–µ–ø–æ—Ä—ä–∫–∏
                  </Typography>
                </Box>
              </CardContent>
            </Card>
          )}
        </Grid>
      </Grid>

      {/* Configuration Dialog */}
      <Dialog
        open={openConfigDialog}
        onClose={handleCloseConfigDialog}
        maxWidth="md"
        fullWidth
      >
        <DialogTitle>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ —Ö—Ä–∞–Ω–∏—Ç–µ–ª–µ–Ω –ø–ª–∞–Ω</DialogTitle>
        <DialogContent>
          <Stack spacing={3} sx={{ mt: 1 }}>
            <Typography variant="h6">–û—Å–Ω–æ–≤–Ω–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</Typography>
            <Grid container spacing={2}>
              <Grid size={{ xs: 6 }}>
                <TextField
                  label="–ò–º–µ –Ω–∞ –ø–ª–∞–Ω–∞"
                  value={configData.planName}
                  onChange={(e) =>
                    setConfigData({ ...configData, planName: e.target.value })
                  }
                  fullWidth
                />
              </Grid>
              <Grid size={{ xs: 6 }}>
                <TextField
                  label="–ü—Ä–æ–¥—ä–ª–∂–∏—Ç–µ–ª–Ω–æ—Å—Ç (—Å–µ–¥–º–∏—Ü–∏)"
                  type="number"
                  value={configData.durationWeeks}
                  onChange={(e) =>
                    setConfigData({
                      ...configData,
                      durationWeeks: parseInt(e.target.value),
                    })
                  }
                  fullWidth
                />
              </Grid>
            </Grid>
            <TextField
              label="–û–ø–∏—Å–∞–Ω–∏–µ"
              value={configData.planDescription}
              onChange={(e) =>
                setConfigData({
                  ...configData,
                  planDescription: e.target.value,
                })
              }
              multiline
              rows={2}
              fullWidth
            />
            <Grid container spacing={2}>
              <Grid size={{ xs: 6 }}>
                <TextField
                  label="–ù–∞—á–∞–ª–Ω–∞ –¥–∞—Ç–∞"
                  type="date"
                  value={configData.startDate}
                  onChange={(e) =>
                    setConfigData({ ...configData, startDate: e.target.value })
                  }
                  fullWidth
                  InputLabelProps={{ shrink: true }}
                />
              </Grid>
              <Grid size={{ xs: 6 }}>
                <TextField
                  label="–ö—Ä–∞–π–Ω–∞ –¥–∞—Ç–∞"
                  type="date"
                  value={configData.endDate}
                  onChange={(e) =>
                    setConfigData({ ...configData, endDate: e.target.value })
                  }
                  fullWidth
                  InputLabelProps={{ shrink: true }}
                />
              </Grid>
            </Grid>

            <Divider />

            <Typography variant="h6">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ</Typography>
            <FormControlLabel
              control={
                <Switch
                  checked={configData.includeWorkoutDays}
                  onChange={(e) =>
                    setConfigData({
                      ...configData,
                      includeWorkoutDays: e.target.checked,
                    })
                  }
                />
              }
              label="–í–∫–ª—é—á–∏ –¥–Ω–∏ –∑–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"
            />
            <FormControlLabel
              control={
                <Switch
                  checked={configData.useSmartGeneration}
                  onChange={(e) =>
                    setConfigData({
                      ...configData,
                      useSmartGeneration: e.target.checked,
                    })
                  }
                />
              }
              label="–ò–∑–ø–æ–ª–∑–≤–∞–π —É–º–µ–Ω –∞–ª–≥–æ—Ä–∏—Ç—ä–º"
            />
            <FormControlLabel
              control={
                <Switch
                  checked={configData.includeSnacks}
                  onChange={(e) =>
                    setConfigData({
                      ...configData,
                      includeSnacks: e.target.checked,
                    })
                  }
                />
              }
              label="–í–∫–ª—é—á–∏ –∑–∞–∫—É—Å–∫–∏"
            />
            <FormControlLabel
              control={
                <Switch
                  checked={configData.usePersonalSettingsForMacros}
                  onChange={(e) =>
                    setConfigData({
                      ...configData,
                      usePersonalSettingsForMacros: e.target.checked,
                    })
                  }
                />
              }
              label="–ò–∑–ø–æ–ª–∑–≤–∞–π –ª–∏—á–Ω–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞ –º–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç–∏"
            />

            <Divider />

            <Typography variant="h6">
              –†–∞–∑–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –º–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç–∏
            </Typography>
            <Grid container spacing={2}>
              <Grid size={{ xs: 4 }}>
                <TextField
                  label="–ü—Ä–æ—Ç–µ–∏–Ω–∏ (%)"
                  type="number"
                  value={configData.proteinPercentage}
                  onChange={(e) =>
                    setConfigData({
                      ...configData,
                      proteinPercentage: parseInt(e.target.value),
                    })
                  }
                  fullWidth
                />
              </Grid>
              <Grid size={{ xs: 4 }}>
                <TextField
                  label="–í—ä–≥–ª–µ—Ö–∏–¥—Ä–∞—Ç–∏ (%)"
                  type="number"
                  value={configData.carbsPercentage}
                  onChange={(e) =>
                    setConfigData({
                      ...configData,
                      carbsPercentage: parseInt(e.target.value),
                    })
                  }
                  fullWidth
                />
              </Grid>
              <Grid size={{ xs: 4 }}>
                <TextField
                  label="–ú–∞–∑–Ω–∏–Ω–∏ (%)"
                  type="number"
                  value={configData.fatsPercentage}
                  onChange={(e) =>
                    setConfigData({
                      ...configData,
                      fatsPercentage: parseInt(e.target.value),
                    })
                  }
                  fullWidth
                />
              </Grid>
            </Grid>
          </Stack>
        </DialogContent>
        <DialogActions>
          <Button onClick={handleCloseConfigDialog}>–û—Ç–∫–∞–∑</Button>
          <Button
            onClick={handleGenerateMealPlanWithConfig}
            variant="contained"
          >
            –ì–µ–Ω–µ—Ä–∏—Ä–∞–π —Ö—Ä–∞–Ω–∏—Ç–µ–ª–µ–Ω –ø–ª–∞–Ω
          </Button>
          <Button
            onClick={handleGenerateSmartMealPlanWithConfig}
            variant="contained"
            color="secondary"
          >
            –ì–µ–Ω–µ—Ä–∏—Ä–∞–π —É–º–µ–Ω –ø–ª–∞–Ω
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export default CalorieCalculator;
